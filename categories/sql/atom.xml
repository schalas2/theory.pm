<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sql | theory.pm]]></title>
  <link href="http://theory.pm/categories/sql/atom.xml" rel="self"/>
  <link href="http://theory.pm/"/>
  <updated>2016-02-29T11:53:56-08:00</updated>
  <id>http://theory.pm/</id>
  <author>
    <name><![CDATA[David E. Wheeler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
    <entry>
      




<title type="html"><![CDATA[Multirow Database Updates →]]></title>
<link href="http://techblog.net-a-porter.com/2013/08/dbixmultirow-updating-multiple-database-rows-quickly-and-easily/"/>
<updated>2013-09-09T17:47:00-07:00</updated>
<id>http://theory.pm/sql/2013/09/09/multirow-database-updates</id>

      <content type="html"><![CDATA[<p>William Blunn:</p>

<blockquote><p>So, given a list of updates to apply we could effect them using the
following steps:</p>

<ol>
<li>Use CREATE TEMPORARY TABLE to create a temporary table to hold the
updates</li>
<li>Use INSERT to populate the temporary table with the updates</li>
<li>Use UPDATE … FROM to update the target table using updates in the
temporary table</li>
<li>Use DROP TABLE to drop the temporary table</li>
</ol>


<p>So in the example above we can reduce five statements to four. This isn’t a
significant improvement in this case. But now the number of statements is no
longer directly dependent on the number of rows requiring updates.</p>

<p><strong>Even if we wanted to update a thousand rows with different values, we
could still do it with four statements.</strong></p></blockquote>

<p>Or you could just use one statement. Here&rsquo;s how to do it with a <a href="http://www.postgresql.org/docs/current/static/queries-with.html" title="PostgreSQL Documentation: WITH Queries (Common Table Expressions)">CTE</a> on
PostgreSQL 9.2 and higher:</p>

<pre><code class="sql PostgreSQL Multirow Upate with CTE">WITH up(name, salary) AS ( VALUES
     ('Jane',  1200),
     ('Frank', 1100),
     ('Susan', 1175),
     ('John',  1150)
)
UPDATE staff
   SET salary = up.salary
  FROM up
 WHERE staff.name = up.name;
</code></pre>

<p>Still on PostgreSQL 9.1 or lower? Use a subselect in the <code>FROM</code> clause
instead:</p>

<pre><code class="sql PostgreSQL Multirow Update with Subselect">UPDATE staff
   SET salary = up.salary
   FROM (VALUES
       ('Jane',  1200),
       ('Frank', 1100),
       ('Susan', 1175),
       ('John',  1150)
   ) AS up(name, salary)
 WHERE staff.name = up.name;
</code></pre>

<p>Stuck with MySQL or Oracle? Use a <code>UNION</code> query in a second table:</p>

<pre><code class="sql MySQL & Oracle Multirow Update">UPDATE staff, (
         SELECT 'Jane' AS name, 1200 AS salary
   UNION SELECT 'Frank',        1100
   UNION SELECT 'Susan',        1175
   UNION SELECT 'John',         1150
) AS up
   SET staff.salary = up.salary
 WHERE staff.name = up.name;
</code></pre>

<p>Using SQLite? Might make sense to use a temporary table for thousands or
millions of rows. But for just a few, use a <code>CASE</code> expression:</p>

<pre><code class="sql SQLite Multirow Update">UPDATE staff
   SET salary = CASE name
       WHEN 'Jane'  THEN 1200
       WHEN 'Frank' THEN 1100
       WHEN 'Susan' THEN 1175
       WHEN 'John'  THEN 1150
   END
 WHERE name in ('Jane', 'Frank', 'Susan', 'John');
</code></pre>

<p>If you need to support multiple database architectures, sure, use something
like <a href="https://github.com/hochgurgler/DBIx-MultiRow" title="DBIx::MultiRow on GitHub">DBIx::MultiRow</a> to encapsulate things. But if, like most of us, you&rsquo;re
on one database for an app, I can&rsquo;t recommend stongly enough how well it pays
to get to know your database well.</p>

<p><a rel="bookmark" href="http://theory.pm/sql/2013/09/09/multirow-database-updates/">§</a></p>

]]></content>
    </entry>
  
</feed>

