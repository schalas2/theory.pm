<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[theory.pm]]></title>
  <link href="http://theory.pm/atom.xml" rel="self"/>
  <link href="http://theory.pm/"/>
  <updated>2014-09-22T11:31:37-07:00</updated>
  <id>http://theory.pm/</id>
  <author>
    <name><![CDATA[David E. Wheeler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
    <entry>
      




<title type="html"><![CDATA[Build Modern Perl RPMs with rpmcpan]]></title>
<link href="http://theory.pm/rpm/2014/09/21/build-modern-perl-rpms-with-rpmcpan/"/>
<updated>2014-09-21T14:45:00-07:00</updated>
<id>http://theory.pm/rpm/2014/09/21/build-modern-perl-rpms-with-rpmcpan</id>

      <content type="html"><![CDATA[<p><img class="center" src="http://theory.pm/images/ioperllove.png" width="640" title="iovation + Perl = Love" alt="iovation + Perl = Love"></p>

<p>We&rsquo;ve been using the CentOS Perl RPMs at <a href="http://iovation.com/">iovation</a> to run all of our Perl
applications. This has been somewhat painful, because the version of Perl,
5.10.1, is quite old &mdash; it shipped in August 2009. In fact, it consists
mostly of bug fixes against Perl 5.10.0, which shipped in December 2007! Many
of the modules provided by CentOS core and <a href="https://fedoraproject.org/wiki/EPEL" title="Extra Packages for Enterprise Linux">EPEL</a> are quite old, as well, and
we had built up quite the collection of customized module RPMs managed by a
massive spaghetti-coded Jenkins job. When we recently ran into a Unicode
issue that would best have been addressed by running a more modern Perl &mdash;
rather than a <a href="http://grokbase.com/t/perl/perl5-porters/147gfvrd2n/encode-vs-json#20140723oncbjv4rddo66735xess5wo77a" title="“Encode vs. JSON” on Perl 5 Porters">hinky workaround</a> &mdash; I finally sat down and knocked out a way
to get a solid set of Modern Perl and related CPAN RPMs.</p>

<p>I gave it the rather boring name <code>rpmcpan</code>, and now <a href="https://github.com/iovation/rpmcpan" title="rpmcpan on GitHub">you can use it, too</a>.
Turns out, <a href="http://twitter.com/aaronblew" title="Aaron Blew: SRE Manager (dun dun duuuuun!)">DevOps</a> doesn&rsquo;t myopically insist on using core RPMs in the name
of some abstract idea about stability. Rather, we just need a way to easily
deploy our stuff as RPMs. If the same applies to your organization, you can
get Modern Perl RPMs, too.</p>

<p>Here&rsquo;s how we do it. We have a new Jenkins job that runs both nightly and
whenever the <a href="https://github.com/iovation/rpmcpan" title="rpmcpan on GitHub"><code>rpmcpan</code> Git repository</a> updates. It uses the <a href="https://metacpan.org/">MetaCPAN</a> API
to build the latest versions of everything we need. Here&rsquo;s how to get it to
build the latest version of Perl, 5.20.1:</p>

<pre><code>./bin/rpmcpan --version 5.20.1
</code></pre>

<p>That will get you a nice, modern Perl RPM, named <code>perl520</code>, completely encapsulated in <code>/usr/local/perl520</code>. Want 5.18 instead: Just change the version:</p>

<pre><code>./bin/rpmcpan --version 5.18.2
</code></pre>

<p>That will give you <code>perl518</code>. But that&rsquo;s not all. You want to build CPAN
distributions against that version. Easy. Just edit the <a href="https://github.com/iovation/rpmcpan/blob/master/etc/dists.json"><code>dists.json</code> file</a>.
Its contents are a JSON object where the keys name CPAN distributions (not
modules), and the values are objects that customize our RPMs get built. Most
of the time, the objects can be empty:</p>

<pre><code>"Try-Tiny": {},
</code></pre>

<p>This results in an RPM named <code>perl520-Try-Tiny</code> (or <code>perl518-Try-Tiny</code>,
etc.). Sometimes you might need additional information to customize the CPAN
spec file generated to build the distribution. For example, since this is
Linux, we need to exclude a Win32 dependency in the <a href="http://search.cpan.org/dist/Encode-Locale" title="Encode-Locale on CPAN">Encode-Locale</a>
distribution:</p>

<pre><code>"Encode-Locale": { "exclude_requires": ["Win32::Console"] },
</code></pre>

<p>Other distributions might require additional RPMs or environment variables,
like <a href="http://search.cpan/org/dist/DBD-Pg/" title="DBD-Pg on CPAN">DBD-Pg</a>, which requires the <a href="http://yum.postgresql.org" title="PostgreSQL Yum Repository">PostgreSQL RPMs</a>:</p>

<pre><code>"DBD-Pg": {
    "build_requires": ["postgresql93-devel", "postgresql93"],
    "environment": { "POSTGRES_HOME": "/usr/pgsql-9.3" }
},
</code></pre>

<p>See the <a href="https://github.com/iovation/rpmcpan/blob/master/README.md" title="`rpmcpan README`">README</a> for a complete list of customization options. Or just get
started with our <a href="https://github.com/iovation/rpmcpan/blob/master/etc/dists.json"><code>dists.json</code> file</a>, which so far builds the bare minimum we
need for one of our Perl apps. Add new distributions? Send a <a href="https://github.com/iovation/rpmcpan/pulls">pull request</a>!
We&rsquo;ll be doing so as we integrate more of our Perl apps with a Modern Perl
and leave the sad RPM past behind.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[→ Sqitch on FLOSS Weekly]]></title>
<link href="http://twit.tv/show/floss-weekly/309"/>
<updated>2014-09-17T20:42:00-07:00</updated>
<id>http://theory.pm/podcast/2014/09/17/sqitch-on-floss-weekly</id>

      <content type="html"><![CDATA[<p>Yours truly was feature in this week&rsquo;s episode of <a href="http://twit.tv/floss">FLOSS Weekly</a>, talking
about Sqitch. I feel pretty good about this interview, despite continually
banging on my legs, the table, and the mic. It&rsquo;s interesting to try to
communicate what Sqitch is about purely by talking.</p>

<!-- http://flwebsites.biz/posts/proportional-responsive-iframes-youtube-videos -->


<div style="width:100%; height:0px; padding-bottom:60%;">
<iframe src="http://theory.pm//twit.tv/embed/17143" width="100%" height="100%" frameborder="0" scrolling="no" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe>
</div>


<p>If it&rsquo;s enough to get you interested in giving a try, try <a href="http://sqitch.org/">installing it</a> and
using working through one of the tutorials:</p>

<ul>
<li><a href="https://metacpan.org/module/sqitchtutorial%20%22Sqitch%20PostgreSQL%20Tutorial">PostgreSQL</a></li>
<li><a href="https://metacpan.org/module/sqitchtutorial-sqlite%20%22Sqitch%20SQLite%20Tutorial">SQLite</a></li>
<li><a href="https://metacpan.org/module/sqitchtutorial-oracle%20%22Sqitch%20Oracle%20Tutorial">Oracle</a></li>
<li><a href="https://metacpan.org/module/sqitchtutorial-mysql%20%22Sqitch%20MySQL%20Tutorial">MySQL</a></li>
<li><a href="https://metacpan.org/module/sqitchtutorial-firebird%20%22Sqitch%20Firebird%20Tutorial">Firebird</a></li>
<li><a href="https://metacpan.org/module/sqitchtutorial-vertica%20%22Sqitch%20Vertica%20Tutorial">Vertica</a></li>
</ul>

<p><a rel="bookmark" href="http://theory.pm/podcast/2014/09/17/sqitch-on-floss-weekly/">§</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Localize Your Perl Apps with this One Weird Trick]]></title>
<link href="http://theory.pm/l10n/2014/09/06/localize-your-perl-apps-with-this-one-weird-trick/"/>
<updated>2014-09-06T18:10:00-07:00</updated>
<id>http://theory.pm/l10n/2014/09/06/localize-your-perl-apps-with-this-one-weird-trick</id>

      <content type="html"><![CDATA[<p>Nota Bene: This is a republication of a <a href="http://perladvent.org/2013/2013-12-09.html">post that originally appeared in the
2013 Perl Advent Calendar</a>.</p>

<hr />

<p>These days, <a href="http://en.wikipedia.org/wiki/Gettext" title="Wikipedia: “gettext”">gettext</a> is far and away the most widely-used localization
(<a href="http://en.wikipedia.org/wiki/Language_localisation" title="Wikipedia: “Localization”">l10n</a>) and internationalization (<a href="http://en.wikipedia.org/wiki/Internationalization_and_localization" title="Wikipedia: “Internationalization and Localization”">i18n</a>) library for open-source software. So
far, it has not been widely used in the Perl community, even though it&rsquo;s the
most flexible, capable, and easy-to use solution, thanks to
<a href="https://metacpan.org/module/Locale::TextDomain" title="Locale::TextDomain on CPAN">Locale::TextDomain</a>.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> How easy? Let&rsquo;s get started!</p>

<h3>Module Internationale</h3>

<p>First, just <em>use</em> Locale::TextDomain. Say you&rsquo;re creating an awesome new
module, Awesome::Module. These CPAN distribution will be named
<code>Awesome-Module</code>, so that&rsquo;s the &ldquo;domain&rdquo; to use for its localizations. Just let
Locale::TextDomain know:</p>

<figure class='code'><figcaption><span>Establish Dominion</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">Locale::</span><span class="n">TextDomain</span> <span class="s">&#39;Awesome-Module&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Locale::TextDomain will later use this string to look for the appropriate
translation catalogs. But don&rsquo;t worry about that just yet. Instead, start using
it to translate user-visible strings in your code. With the assistance of the
Locale::TextDomain&rsquo;s [comprehensive documentation], you&rsquo;ll find it second nature
to internationalize your modules in no time. For example, simple strings are
denoted with <code>__</code>:</p>

<figure class='code'><figcaption><span>Trekkie Greetings</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="n">say</span> <span class="n">__</span> <span class="s">&#39;Greetings puny human!&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you need to specify variables, use <code>__x</code>:</p>

<figure class='code'><figcaption><span>Animal Thanks</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="n">say</span> <span class="n">__x</span><span class="p">(</span>
</span><span class='line'>   <span class="s">&#39;Thank you {sir}, may I have another?&#39;</span><span class="p">,</span>
</span><span class='line'>   <span class="n">sir</span> <span class="o">=&gt;</span> <span class="nv">$username</span><span class="p">,</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Need to manage plurals? Use <code>__n</code>:</p>

<figure class='code'><figcaption><span>Obligatory Python Reference</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="n">say</span> <span class="n">__n</span><span class="p">(</span>
</span><span class='line'>    <span class="s">&#39;I will not buy this record, it is scratched.&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;I will not buy these records, they are scratched.&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">$num_records</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>If <code>$num_records</code> is 1, the first phrase will be used. Otherwise the second.</p>

<p>Sometimes you gotta do both, mix variables and plurals. <code>__nx</code> has got you
covered there:</p>

<figure class='code'><figcaption><span>Deeper Understanding</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="n">say</span> <span class="n">__nx</span><span class="p">(</span>
</span><span class='line'>    <span class="s">&#39;One item has been grokked.&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;{count} items have been grokked.&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">$num_items</span><span class="p">,</span>
</span><span class='line'>    <span class="n">count</span> <span class="o">=&gt;</span> <span class="nv">$num_items</span><span class="p">,</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Congratulations! Your module is now internationalized. Wasn&rsquo;t that easy? Make a
habit of using these functions in all the modules in your distribution, always
with the <code>Awesome-Module</code> domain, and you&rsquo;ll be set.</p>

<h4>Encode da Code</h4>

<p>Locale::TextDomain is great, but it dates from a time when Perl character
encoding was, shall we say, sub-optimal. It therefore took it upon itself to
try to do the right thing, which is to to detect the locale from the runtime
environment and automatically encode as appropriate. Which might work okay if
all you ever do is print localized messages &mdash; and never anything else.</p>

<p>If, on the other hand, you will be manipulating localized strings in your code,
or emitting unlocalized text (such as that provided by the user or read from a
database), then it&rsquo;s probably best to coerce Locale::TextDomain to return Perl
strings, rather than encoded bytes. There&rsquo;s no formal interface for this in
Locale::TextDomain, so we have to hack it a bit: set the <code>$OUTPUT_CHARSET</code>
environment variable to &ldquo;UTF-8&rdquo; and then bind a filter. Don&rsquo;t know what that
means? Me neither. Just put this code somewhere in your distribution where it
will always run early, before anything gets localized:</p>

<figure class='code'><figcaption><span>Control Decode</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">Locale::</span><span class="n">Messages</span> <span class="sx">qw(bind_textdomain_filter)</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">Encode</span><span class="p">;</span>
</span><span class='line'><span class="k">BEGIN</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$ENV</span><span class="p">{</span><span class="n">OUTPUT_CHARSET</span><span class="p">}</span> <span class="o">=</span> <span class="s">&#39;UTF-8&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">bind_textdomain_filter</span> <span class="s">&#39;Awesome-Module&#39;</span> <span class="o">=&gt;</span> <span class="o">\&amp;</span><span class="nn">Encode::</span><span class="n">decode_utf8</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You only have to do this once per domain. So even if you use Locale::TextDomain
with the <code>Awesome-Module</code> domain in a bunch of your modules, the presence of
this code in a single early-loading module ensures that strings will always be
returned as Perl strings by the localization functions.</p>

<h4>Environmental Safety</h4>

<p>So what about output? There&rsquo;s one more bit of boilerplate you&rsquo;ll need to throw
in. Or rather, put this into the <code>main</code> package that uses your modules to begin
with, such as the command-line script the user invokes to run an application.</p>

<p>First, on the shebang line, follow <a href="http://stackoverflow.com/a/6163129/79202" title="Perl UTF-8 Recommendations on Stack Overflow">Tom Christiansen&rsquo;s advice</a> and put <code>-CAS</code>
in it (or set the <code>$PERL_UNICODE</code> environment variable to <code>AS</code>). Then use the
<a href="https://metacpan.org/pod/POSIX#setlocale" title="POSIX on CPAN">POSIX <code>setlocale</code></a> function to the appropriate locale for the runtime
environment. How? Like this:</p>

<figure class='code'><figcaption><span>Localization Boilerplate</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1">#!/usr/bin/perl -CAS</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="n">v5</span><span class="mf">.12</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">utf8</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">POSIX</span> <span class="sx">qw(setlocale)</span><span class="p">;</span>
</span><span class='line'><span class="k">BEGIN</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="vg">$^O</span> <span class="ow">eq</span> <span class="s">&#39;MSWin32&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">require</span> <span class="nn">Win32::</span><span class="n">Locale</span><span class="p">;</span>
</span><span class='line'>        <span class="n">setlocale</span> <span class="nn">POSIX::</span><span class="n">LC_ALL</span><span class="p">,</span> <span class="nn">Win32::Locale::</span><span class="n">get_locale</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">setlocale</span> <span class="nn">POSIX::</span><span class="n">LC_ALL</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nn">Awesome::</span><span class="n">Module</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Locale::TextDomain will notice the locale and select the appropriate translation
catalog at runtime.</p>

<h3>Is that All There Is?</h3>

<p>Now what? Well, you could do nothing. Ship your code and those
internationalized phrases will be handled just like any other string in your
code.</p>

<p>But what&rsquo;s the point of that? The real goal is to get these things translated.
There are two parts to that process:</p>

<ol>
<li><p>Parsing the internationalized strings from your modules and creating
language-specific translation catalogs, or &ldquo;<a href="https://www.gnu.org/software/gettext/manual/html_node/PO-Files.html" title="GNU gettext: PO Files">PO files</a>&rdquo;, for translators to
edit. These catalogs should be maintained in your source code repository.</p></li>
<li><p>Compiling the PO files into binary files, or &ldquo;<a href="https://www.gnu.org/software/gettext/manual/html_node/MO-Files.html" title="GNU gettext: MO Files">MO files</a>&rdquo;, and distributing
them with your modules. These files should <em>not</em> be maintained in
your source code repository.</p></li>
</ol>


<p>Until a year ago, there was no Perl-native way to manage these processes.
Locale::TextDomain ships with a <a href="https://metacpan.org/source/GUIDO/libintl-perl-1.23/sample/simplecal/po/Makefile" title="Sample Locale::TextDomain Makefile">sample Makefile</a> demonstrating the appropriate
use of the <a href="https://www.gnu.org/software/gettext/">GNU gettext</a> command-line tools, but that seemed a steep price for
a Perl hacker to pay.</p>

<p>A better fit for the Perl hacker&rsquo;s brain, I thought, is Dist::Zilla. So I wrote
<a href="https://metacpan.org/module/Dist::Zilla::LocaleTextDomain" title="Dist::Zilla::LocaleTextDomain on CPAN">Dist::Zilla::LocaleTextDomain</a> to encapsulate the use of the gettext
utiltiies. Here&rsquo;s how it works.</p>

<p>First, configuring Dist::Zilla to compile localization catalogs for
distribution: add these lines to your <code>dist.ini</code> file:</p>

<figure class='code'><figcaption><span>LocaleTextDomain is your dist.ini</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[ShareDir]</span>
</span><span class='line'><span class="k">[LocaleTextDomain]</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are <a href="https://metacpan.org/pod/Dist::Zilla::Plugin::LocaleTextDomain#Configuration" title="Dist::Zilla LocaleTextDomain Configuration">configuration attributes</a> for the <code>LocaleTextDomain</code> plugin, such as
where to find the PO files and where to put the compiled MO files. In case you
didn&rsquo;t use your distribution name as your localization domain in your modules,
for example:</p>

<figure class='code'><figcaption><span>Go with a Java-y Domain</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">Locale::</span><span class="n">TextDomain</span> <span class="s">&#39;com.example.perl-libawesome&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you&rsquo;d set the <code>textdomain</code> attribute so that the <code>LocaleTextDomain</code> plugin
can find the translation catalogs:</p>

<figure class='code'><figcaption><span>The Domain in DNS</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[LocaleTextDomain]</span>
</span><span class='line'><span class="na">textdomain</span> <span class="o">=</span> <span class="s">com.example.perl-libawesome</span>
</span></code></pre></td></tr></table></div></figure>


<p>Check out the <a href="https://metacpan.org/pod/Dist::Zilla::Plugin::LocaleTextDomain#Configuration" title="Dist::Zilla LocaleTextDomain Configuration">configuration docs</a> for details on all available attributes.</p>

<p>At this point, the plugin doesn&rsquo;t do much, because there are no translation
catalogs yet. You might see this line from <code>dzil build</code>, though:</p>

<figure class='code'><figcaption><span>Nothing to See Here</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="o">[</span>LocaleTextDomain<span class="o">]</span> Skipping language compilation: directory po does not exist
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s give it something to do!</p>

<h3>Locale Motion</h3>

<p>To add a French translation file, use the <a href="https://metacpan.org/pod/Dist::Zilla::App::Command::msg_init" title="dzil msg-init documentation on CPAN"><code>msg-init</code></a> command<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>:</p>

<figure class='code'><figcaption><span>French Neuveau</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>% dzil msg-init fr
</span><span class='line'>Created po/fr.po.
</span></code></pre></td></tr></table></div></figure>


<p>The <code>msg-init</code> command uses the <a href="https://www.gnu.org/software/gettext/">GNU gettext</a> utilities to scan your Perl
source code and initialize the French catalog, <code>po/fr.po</code>. This file is now
ready translation! Commit it into your source code repository so your
agile-minded French-speaking friends can find it. Use <code>msg-init</code> to create as
many language files as you like:</p>

<figure class='code'><figcaption><span>Multilingualism</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>% dzil msg-init de ja.JIS en_US.UTF-8 en_UK.UTF-8
</span><span class='line'>Created po/de.po.
</span><span class='line'>Created po/ja.po.
</span><span class='line'>Created po/en_US.po.
</span><span class='line'>Created po/en_UK.po.
</span></code></pre></td></tr></table></div></figure>


<p>Each language has its on PO file. You can even have region-specific catalogs,
such as the <code>en_US</code> and <code>en_UK</code> variants here. Each time a catalog is updated,
the changes should be committed to the repository, like code. This allows the
latest translations to always be available for compilation and distribution.
The output from <code>dzil build</code> now looks something like:</p>

<figure class='code'><figcaption><span>Catalogs Plugged</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>po/fr.po: 10 translated messages, 1 fuzzy translation, 0 untranslated messages.
</span><span class='line'>po/ja.po: 10 translated messages, 1 fuzzy translation, 0 untranslated messages.
</span><span class='line'>po/en_US.po: 10 translated messages, 1 fuzzy translation, 0 untranslated messages.
</span><span class='line'>po/en_UK.po: 10 translated messages, 1 fuzzy translation, 0 untranslated messages.
</span></code></pre></td></tr></table></div></figure>


<p>The resulting MO files will be in the shared directory of your distribution:</p>

<figure class='code'><figcaption><span>She Want Mo Mo Mo</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>% find Awesome-Module-0.01/share -type f
</span><span class='line'>Awesome-Module-0.01/share/LocaleData/de/LC_MESSAGES/Awesome-Module.mo
</span><span class='line'>Awesome-Module-0.01/share/LocaleData/en_UK/LC_MESSAGES/Awesome-Module.mo
</span><span class='line'>Awesome-Module-0.01/share/LocaleData/en_US/LC_MESSAGES/Awesome-Module.mo
</span><span class='line'>Awesome-Module-0.01/share/LocaleData/ja/LC_MESSAGES/Awesome-Module.mo
</span></code></pre></td></tr></table></div></figure>


<p>From here <a href="https://metacpan.org/module/Module::Build" title="Module::Build on CPAN">Module::Build</a> or <a href="https://metacpan.org/module/ExtUtils::MakeMaker" title="ExtUtils::MakeMaker on CPAN">ExtUtils::MakeMaker</a> will install these MO files
with the rest of your distribution, right where Locale::TextDomain can find
them at runtime. The PO files, on the other hand, won&rsquo;t be used at all, so you
might as well exclude them from the distribution. Add this line to your
<code>MANIFEST.SKIP</code> to prevent the <code>po</code> directory and its contents from being
included in the distribution:</p>

<figure class='code'><figcaption><span>No PO</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="o">^</span><span class="n">po</span><span class="o">/</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Mergers and Acquisitions</h3>

<p>Of course no code base is static. In all likelihood, you&rsquo;ll change your code
&mdash; and end up adding, editing, and removing localizable strings as a result.
You&rsquo;ll need to periodically merge these changes into all of your translation
catalogs so that your translators can make the corresponding updates. That&rsquo;s
what the the <a href="https://metacpan.org/pod/Dist::Zilla::App::Command::msg_merge" title="dzil msg-merge documentation on CPAN"><code>msg-merge</code></a> command is for:</p>

<figure class='code'><figcaption><span>Merge Management </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>% dzil msg-merge
</span><span class='line'>extracting gettext strings
</span><span class='line'>Merging gettext strings into po/de.po
</span><span class='line'>Merging gettext strings into po/en_UK.po
</span><span class='line'>Merging gettext strings into po/en_US.po
</span><span class='line'>Merging gettext strings into po/ja.po
</span></code></pre></td></tr></table></div></figure>


<p>This command re-scans your Perl code and updates all of the language files. Old
messages will be commented-out and new ones added. Commit the changes and give
your translators a holler so they can keep the awesome going.</p>

<h4>Template Scan</h4>

<p>The <code>msg-init</code> and <code>msg-merge</code> commands don&rsquo;t actually scan your source code.
Sort of lied about that. Sorry. What they actually do is merge a template file
into the appropriate catalog files. If this template file does not already
exist, a temporary one will be created and discarded when the initialization or
merging is done.</p>

<p>But projects commonly maintain a permanent template file, stored in the source
code repository along with the translation catalogs. For this purpose, we have
the <a href="https://metacpan.org/pod/Dist::Zilla::App::Command::msg_scan" title="dzil msg-scan documentation on CPAN"><code>msg-scan</code></a> command. Use it to create or update the template, or POT file:</p>

<figure class='code'><figcaption><span>Scanners</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>% dzil msg-scan
</span><span class='line'>extracting gettext strings into po/Awesome-Module.pot
</span></code></pre></td></tr></table></div></figure>


<p>From here on in, the resulting <code>.pot</code> file will be used by <code>msg-init</code> and <code>msg-merge</code> instead of scanning your code all over again. But keep in mind
that, if you do maintain a POT file, future merges will be a two-step process:
First run <code>msg-scan</code> to update the POT file, then <code>msg-merge</code> to merge its
changes into the PO files:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>% dzil msg-scan
</span><span class='line'>extracting gettext strings into po/Awesome-Module.pot
</span><span class='line'>% dzil msg-merge
</span><span class='line'>Merging gettext strings into po/de.po
</span><span class='line'>Merging gettext strings into po/en_UK.po
</span><span class='line'>Merging gettext strings into po/en_US.po
</span><span class='line'>Merging gettext strings into po/ja.po
</span></code></pre></td></tr></table></div></figure>


<h3>Lost in Translation</h3>

<p>One more thing, a note for translators. They can, of course, also use
<code>msg-scan</code> and <code>msg-merge</code> to update the catalogs they&rsquo;re working on. But how
do they test their translations? Easy: use the <a href="https://metacpan.org/pod/Dist::Zilla::App::Command::msg_compile" title="dzil msg-compile documentation on CPAN"><code>msg-compile</code></a> command to
compile a single catalog:</p>

<figure class='code'><figcaption><span>Translation Comilation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>% dzil msg-compile po/fr.po
</span><span class='line'><span class="o">[</span>LocaleTextDomain<span class="o">]</span> po/fr.po: 195 translated messages.
</span></code></pre></td></tr></table></div></figure>


<p>The resulting compiled catalog will be saved to the <code>LocaleData</code> subdirectory
of the current directory, so it&rsquo;s easily available to your app for testing.
Just be sure to tell Perl to include the current directory in the search path,
and set the <code>$LANGUAGE</code> environment variable for your language. For example,
here&rsquo;s how I test the [Sqitch] French catalog:</p>

<figure class='code'><figcaption><span>Translation Comilation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>% dzil msg-compile po/fr.po
</span><span class='line'><span class="o">[</span>LocaleTextDomain<span class="o">]</span> po/fr.po: 148 translated messages, 36 fuzzy translations, 27 untranslated messages.
</span><span class='line'>% <span class="nv">LANGUAGE</span><span class="o">=</span>fr perl -Ilib -CAS -I. bin/sqitch foo
</span><span class='line'><span class="s2">&quot;foo&quot;</span> n<span class="err">&#39;</span>est pas une commande valide
</span></code></pre></td></tr></table></div></figure>


<p>Just be sure to delete the <code>LocaleData</code> directory when you&rsquo;re done &mdash; or at
least don&rsquo;t commit it to the repository.</p>

<h3>TL;DR</h3>

<p>This may seem like a lot of steps, and it is. But once you have the basics in
place &mdash; Configuring the <a href="https://metacpan.org/module/Dist::Zilla::LocaleTextDomain" title="Dist::Zilla::LocaleTextDomain on CPAN">Dist::Zilla::LocaleTextDomain</a> plugin, setting up
the &ldquo;textdomain filter&rdquo;, setting and the locale in the application &mdash; there
are just a few habits to get into:</p>

<ul>
<li>Use the functions <code>__</code>, <code>__x</code>, <code>__n</code>, and <code>__nx</code> to internationalize
user-visible strings</li>
<li>Run <code>msg-scan</code> and <code>msg-merge</code> to keep the catalogs up-to-date</li>
<li>Keep your translators in the loop.</li>
</ul>


<p>The <a href="https://metacpan.org/module/Dist::Zilla::LocaleTextDomain" title="Dist::Zilla::LocaleTextDomain on CPAN">Dist::Zilla::LocaleTextDomain</a> plugin will do the rest.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>What about <a href="https://metacpan.org/module/Locale::Maketext">Locale::Maketext</a>, you ask? It has not, alas, withsthood the test of time. For details, see Nikolai Prokoschenko&rsquo;s epic 2009 polemic, &ldquo;<a href="http://rassie.org/archives/247">On the state of i18n in Perl</a>.&rdquo; See also Steffen Winkler&rsquo;s presentation, <a href="http://download.steffen-winkler.de/dpws2010/I18N_STEFFENW.pod">Internationalisierungs-Framework auswählen</a> (and the <a href="https://gist.github.com/ap/909197">English translation</a> by <a href="http://blogs.perl.org/users/aristotle/2011/04/stop-using-maketext.html">Aristotle Pagaltzis</a>), from <a href="http://conferences.yapceurope.org/gpw2010/">German Perl Workshop 2010</a>.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>The <code>msg-init</code> function &mdash; like all of the <code>dzil msg-*</code> commands &ndash; uses the <a href="https://www.gnu.org/software/gettext/">GNU gettext</a> utilities under the hood. You&rsquo;ll need a reasonably modern version in your path, or else it won&rsquo;t work.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[→ Lexical Subroutines]]></title>
<link href="http://rjbs.manxome.org/rubric/entry/2016"/>
<updated>2013-09-25T20:12:00-07:00</updated>
<id>http://theory.pm/syntax/2013/09/25/lexical-subroutines</id>

      <content type="html"><![CDATA[<p>Ricardo Signes:</p>

<blockquote><p>One of the big new experimental features in Perl 5.18.0 is lexical
 subroutines. In other words, you can write this:</p>

<pre><code>my sub quickly { ... }
my @sorted = sort quickly @list;

my sub greppy (&amp;@) { ... }
my @grepped = greppy { ... } @input;
</code></pre>

<p>These two examples show cases where lexical <em>references</em> to anonymous
subroutines would not have worked. The first argument to <code>sort</code> must be a
block or a subroutine <em>name</em>, which leads to awful code like this:</p>

<pre><code>sort { $subref-&gt;($a, $b) } @list
</code></pre>

<p>With our greppy, above, we get to benefit from the parser-affecting
behaviors of subroutine prototypes.</p></blockquote>

<p>My favorite tidbit about this feature? Because lexical subs are <em>lexical,</em> and
method-dispatch is <em>package</em>-based, lexical subs are not subject to method
lookup and dispatch! This just might alleviate the confusion of methods and
subs, as <a href="http://www.modernperlbooks.com/mt/2013/09/functions-shouldnt-be-methods-yet-another-reminder.html">chromatic complained about just yesterday</a>. Probably doesn&rsquo;t solve
the problem for imported subs, though.</p>
<p><a rel="bookmark" href="http://theory.pm/syntax/2013/09/25/lexical-subroutines/">§</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[→ Multirow Database Updates]]></title>
<link href="http://techblog.net-a-porter.com/2013/08/dbixmultirow-updating-multiple-database-rows-quickly-and-easily/"/>
<updated>2013-09-09T17:47:00-07:00</updated>
<id>http://theory.pm/sql/2013/09/09/multirow-database-updates</id>

      <content type="html"><![CDATA[<p>William Blunn:</p>

<blockquote><p>So, given a list of updates to apply we could effect them using the
following steps:</p>

<ol>
<li>Use CREATE TEMPORARY TABLE to create a temporary table to hold the
updates</li>
<li>Use INSERT to populate the temporary table with the updates</li>
<li>Use UPDATE … FROM to update the target table using updates in the
temporary table</li>
<li>Use DROP TABLE to drop the temporary table</li>
</ol>


<p>So in the example above we can reduce five statements to four. This isn’t a
significant improvement in this case. But now the number of statements is no
longer directly dependent on the number of rows requiring updates.</p>

<p><strong>Even if we wanted to update a thousand rows with different values, we
could still do it with four statements.</strong></p></blockquote>

<p>Or you could just use one statement. Here&rsquo;s how to do it with a <a href="http://www.postgresql.org/docs/current/static/queries-with.html" title="PostgreSQL Documentation: WITH Queries (Common Table Expressions)">CTE</a> on
PostgreSQL 9.2 and higher:</p>

<figure class='code'><figcaption><span>PostgreSQL Multirow Upate with CTE</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">WITH</span> <span class="n">up</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">salary</span><span class="p">)</span> <span class="k">AS</span> <span class="p">(</span> <span class="k">VALUES</span>
</span><span class='line'>     <span class="p">(</span><span class="s1">&#39;Jane&#39;</span><span class="p">,</span>  <span class="mi">1200</span><span class="p">),</span>
</span><span class='line'>     <span class="p">(</span><span class="s1">&#39;Frank&#39;</span><span class="p">,</span> <span class="mi">1100</span><span class="p">),</span>
</span><span class='line'>     <span class="p">(</span><span class="s1">&#39;Susan&#39;</span><span class="p">,</span> <span class="mi">1175</span><span class="p">),</span>
</span><span class='line'>     <span class="p">(</span><span class="s1">&#39;John&#39;</span><span class="p">,</span>  <span class="mi">1150</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="k">UPDATE</span> <span class="n">staff</span>
</span><span class='line'>   <span class="k">SET</span> <span class="n">salary</span> <span class="o">=</span> <span class="n">up</span><span class="p">.</span><span class="n">salary</span>
</span><span class='line'>  <span class="k">FROM</span> <span class="n">up</span>
</span><span class='line'> <span class="k">WHERE</span> <span class="n">staff</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">up</span><span class="p">.</span><span class="n">name</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Still on PostgreSQL 9.1 or lower? Use a subselect in the <code>FROM</code> clause
instead:</p>

<figure class='code'><figcaption><span>PostgreSQL Multirow Update with Subselect</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">UPDATE</span> <span class="n">staff</span>
</span><span class='line'>   <span class="k">SET</span> <span class="n">salary</span> <span class="o">=</span> <span class="n">up</span><span class="p">.</span><span class="n">salary</span>
</span><span class='line'>   <span class="k">FROM</span> <span class="p">(</span><span class="k">VALUES</span>
</span><span class='line'>       <span class="p">(</span><span class="s1">&#39;Jane&#39;</span><span class="p">,</span>  <span class="mi">1200</span><span class="p">),</span>
</span><span class='line'>       <span class="p">(</span><span class="s1">&#39;Frank&#39;</span><span class="p">,</span> <span class="mi">1100</span><span class="p">),</span>
</span><span class='line'>       <span class="p">(</span><span class="s1">&#39;Susan&#39;</span><span class="p">,</span> <span class="mi">1175</span><span class="p">),</span>
</span><span class='line'>       <span class="p">(</span><span class="s1">&#39;John&#39;</span><span class="p">,</span>  <span class="mi">1150</span><span class="p">)</span>
</span><span class='line'>   <span class="p">)</span> <span class="k">AS</span> <span class="n">up</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">salary</span><span class="p">)</span>
</span><span class='line'> <span class="k">WHERE</span> <span class="n">staff</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">up</span><span class="p">.</span><span class="n">name</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Stuck with MySQL or Oracle? Use a <code>UNION</code> query in a second table:</p>

<figure class='code'><figcaption><span>MySQL & Oracle Multirow Update</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">UPDATE</span> <span class="n">staff</span><span class="p">,</span> <span class="p">(</span>
</span><span class='line'>         <span class="k">SELECT</span> <span class="s1">&#39;Jane&#39;</span> <span class="k">AS</span> <span class="n">name</span><span class="p">,</span> <span class="mi">1200</span> <span class="k">AS</span> <span class="n">salary</span>
</span><span class='line'>   <span class="k">UNION</span> <span class="k">SELECT</span> <span class="s1">&#39;Frank&#39;</span><span class="p">,</span>        <span class="mi">1100</span>
</span><span class='line'>   <span class="k">UNION</span> <span class="k">SELECT</span> <span class="s1">&#39;Susan&#39;</span><span class="p">,</span>        <span class="mi">1175</span>
</span><span class='line'>   <span class="k">UNION</span> <span class="k">SELECT</span> <span class="s1">&#39;John&#39;</span><span class="p">,</span>         <span class="mi">1150</span>
</span><span class='line'><span class="p">)</span> <span class="k">AS</span> <span class="n">up</span>
</span><span class='line'>   <span class="k">SET</span> <span class="n">staff</span><span class="p">.</span><span class="n">salary</span> <span class="o">=</span> <span class="n">up</span><span class="p">.</span><span class="n">salary</span>
</span><span class='line'> <span class="k">WHERE</span> <span class="n">staff</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">up</span><span class="p">.</span><span class="n">name</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using SQLite? Might make sense to use a temporary table for thousands or
millions of rows. But for just a few, use a <code>CASE</code> expression:</p>

<figure class='code'><figcaption><span>SQLite Multirow Update</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">UPDATE</span> <span class="n">staff</span>
</span><span class='line'>   <span class="k">SET</span> <span class="n">salary</span> <span class="o">=</span> <span class="k">CASE</span> <span class="n">name</span>
</span><span class='line'>       <span class="k">WHEN</span> <span class="s1">&#39;Jane&#39;</span>  <span class="k">THEN</span> <span class="mi">1200</span>
</span><span class='line'>       <span class="k">WHEN</span> <span class="s1">&#39;Frank&#39;</span> <span class="k">THEN</span> <span class="mi">1100</span>
</span><span class='line'>       <span class="k">WHEN</span> <span class="s1">&#39;Susan&#39;</span> <span class="k">THEN</span> <span class="mi">1175</span>
</span><span class='line'>       <span class="k">WHEN</span> <span class="s1">&#39;John&#39;</span>  <span class="k">THEN</span> <span class="mi">1150</span>
</span><span class='line'>   <span class="k">END</span>
</span><span class='line'> <span class="k">WHERE</span> <span class="n">name</span> <span class="k">in</span> <span class="p">(</span><span class="s1">&#39;Jane&#39;</span><span class="p">,</span> <span class="s1">&#39;Frank&#39;</span><span class="p">,</span> <span class="s1">&#39;Susan&#39;</span><span class="p">,</span> <span class="s1">&#39;John&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you need to support multiple database architectures, sure, use something
like <a href="https://github.com/hochgurgler/DBIx-MultiRow" title="DBIx::MultiRow on GitHub">DBIx::MultiRow</a> to encapsulate things. But if, like most of us, you&rsquo;re
on one database for an app, I can&rsquo;t recommend stongly enough how well it pays
to get to know your database well.</p>
<p><a rel="bookmark" href="http://theory.pm/sql/2013/09/09/multirow-database-updates/">§</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[→ TPF To Revamp Grants]]></title>
<link href="http://news.perlfoundation.org/2013/08/2013q3-grant-proposals.html"/>
<updated>2013-08-23T17:28:00-07:00</updated>
<id>http://theory.pm/tpf/2013/08/23/tpf-to-revamp-grants</id>

      <content type="html"><![CDATA[<p>Alberto Simões:</p>

<blockquote><p>Nevertheless, this lack of &ldquo;lower than $3000&rdquo; grant proposals, and the fact
that lot of people have been discussing (and complaining) about this value
being too low, the Grants Committee is starting a discussion on rewriting
and reorganizing the way it works. Namely, in my personal blog I
<a href="http://blogs.perl.org/users/alberto_simoes/2013/02/about-the-grants-committee.html">opened a discussion</a> about the Grants Committee some time ago, and had
plenty of feedback, that will be helpful for our internal discussion.</p></blockquote>

<p>This is great news. I would love to see more and more ambitious grant
proposals, as well as awards people an subsist on. I look forward to seeing
the new rules.</p>
<p><a rel="bookmark" href="http://theory.pm/tpf/2013/08/23/tpf-to-revamp-grants/">§</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[→ Mopping the Moose]]></title>
<link href="http://blogs.perl.org/users/stevan_little/2013/08/mapping-the-mop-to-moose.html"/>
<updated>2013-08-15T13:44:00-07:00</updated>
<id>http://theory.pm/mop/2013/08/15/mopping-the-moose</id>

      <content type="html"><![CDATA[<p>Stevan Little:</p>

<blockquote><p>I spent much of last week on vacation with the family so very little actual
coding got done on the <a href="https://github.com/stevan/p5-mop-redux">p5-mop</a>, but instead I did a lot of thinking. My
next major goal for the <a href="https://github.com/stevan/p5-mop-redux">p5-mop</a> is to port a module written in <a href="https://metacpan.org/module/Moose">Moose</a>, in
particular, one that uses many different <a href="https://metacpan.org/module/Moose">Moose</a> features. The module I have
chosen to port is <a href="https://metacpan.org/module/Bread::Board">Bread::Board</a> and I chose it for two reasons; first, it
was the first real module that I wrote using <a href="https://metacpan.org/module/Moose">Moose</a> and second, it makes
heavy use of a lot of <a href="https://metacpan.org/module/Moose">Moose</a>&rsquo;s features.</p></blockquote>

<p>I&rsquo;m so happy to see Stevan making progress on the Perl 5 MOP again.</p>
<p><a rel="bookmark" href="http://theory.pm/mop/2013/08/15/mopping-the-moose/">§</a></p>]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[A Perl Blog]]></title>
<link href="http://theory.pm/blog/2013/07/26/a-perl-blog/"/>
<updated>2013-07-26T18:08:00-07:00</updated>
<id>http://theory.pm/blog/2013/07/26/a-perl-blog</id>

      <content type="html"><![CDATA[<p>I have been unsatisfied with <a href="http://justatheory.com/">Just a Theory</a> for some time. I started that
blog in 2004 more or less for fun, thinking it would be my permanent home on
the internet. And it has been. But the design, while okay in 2004, is just
awful by today&rsquo;s standards. A redesign is something I have planned to do for
quite some time.</p>

<p>I had also been thinking about my audience. Or rather, audiences. I&rsquo;ve blogged
about many things, but while a few dear family members might want to read
everything I ever post, most folks, I think, are interested in only a subset
of topics. Readers of <a href="http://justatheory.com/">Just a Theory</a> came for posts about Perl, or
PostgreSQL, or culture, travel, or politics. But few came for all those
topics, in my estimation.</p>

<p>More recently, a whole bunch of top-level domains have opened up, often with
the opportunity for anyone to register them. I was lucky enough to snag
<code>theory.pm</code> and <code>theory.pl</code>, thinking that perhaps I would create a site just
for blogging about Perl. I also nabbed <code>theory.so</code>, which I might dedicate to
database-related blogging, and <code>theory.me</code>, which would be my personal blog
(travel, photography, cultural essays, etc.).</p>

<p>And then there is <a href="http://octopress.org">Octopress</a>. A blogging engine for hackers. Perfect for me.
Hard to imagine something more appropriate (unless it was written in Perl). It
seemed like a good opportunity to partition my online blogging.</p>

<p>So here we are with my first partition. <a href="http://theory.pm/">theory.pm</a> is a Perl blog. Seemed
like the perfect name. I fiddled with it off and on for a few months, often
following <a href="http://mattgemmell.com/2013/05/22/designing-blogs-for-readers/">Matt Gemmell&rsquo;s Advice</a>, and I&rsquo;m really happy with it. The
open-source fonts <a href="https://github.com/adobe/source-sans-pro">Source Sans Pro</a> and <a href="https://github.com/adobe/source-code-pro">Source Code Pro</a>, from Adobe, look
great. The source code examples are beautifully marked up and displayed using
the <a href="http://ethanschoonover.com/solarized">Solarized</a> color scheme (though presentation varies in feed readers).
Better still, it&rsquo;s equally attractive and readable on computers, tablets and
phones, thanks to the foundation laid by Aron Cedercrantz’s <a href="https://github.com/rastersize/BlogTheme">BlogTheme</a>.</p>

<p>I expect to fork this code to create a database blog soon, and then perhaps
put together a personal blog. Maybe the personal blog will provide link posts
for posts on the other sites, so that if anyone really wants to read
everything, they can. I haven&rsquo;t decided yet.</p>

<p>In the meantime, now that I have a dedicated Perl blog, I guess I&rsquo;ll have to
start writing more Perl-related stuff. I&rsquo;m starting with some posts about the
state of exception handling in Perl 5, the first of which is <a href="http://theory.pm/exceptions/2013/07/26/trying-times/">already up</a>. Stay
tuned for more.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Trying Times]]></title>
<link href="http://theory.pm/exceptions/2013/07/26/trying-times/"/>
<updated>2013-07-26T15:20:00-07:00</updated>
<id>http://theory.pm/exceptions/2013/07/26/trying-times</id>

      <content type="html"><![CDATA[<p>Exception handling is a bit of a pain in Perl. Traditionally, we use
<code>eval {}</code>:</p>

<figure class='code'><figcaption><span>Perl eval</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nb">eval</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">foo</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="k">my</span> <span class="nv">$err</span> <span class="o">=</span> <span class="vg">$@</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1"># Inspect $err…</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The use of the <code>if</code> block is a bit unfortunate; worse is the use of the global
<code>$@</code> variable, which has inflicted unwarranted pain on developers over the
years<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. Many Perl hackers put <a href="https://metacpan.org/module/Try::Tiny">Try::Tiny</a> to work to circumvent these
shortcomings:</p>

<figure class='code'><figcaption><span>Try::Tiny</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="n">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">foo</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1"># Inspect $_…</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alas, Try::Tiny introduces its own idiosyncrasies, particularly its use of
subroutine references rather than blocks. While a necessity of a pure-Perl
implementation, it prevents <code>return</code>ing from the calling context. One must
work around this deficiency by <a href="http://stackoverflow.com/a/10366209/79202">checking return values</a>:</p>

<figure class='code'><figcaption><span>Return from Try::Tiny</span><a href='http://stackoverflow.com/a/10366209/79202'>More Gotchas</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">my</span> <span class="nv">$rv</span> <span class="o">=</span> <span class="n">try</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">f</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>   <span class="c1"># …</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$rv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I can&rsquo;t tell you how often this quirk burns me.</p>

<!-- more -->


<p>Sadly, there is a deeper problem then syntax: Just what, exactly, is an
exception? How does one determine the exceptional condition, and what can be
done about it? It might be a string. The string might be localized. It might
be an <a href="https://metacpan.org/module/Exception::Class">Exception::Class</a> object, or a <a href="https://metacpan.org/module/Throwable">Throwable</a> object, or a simple array
reference. Or any other value a Perl scalar can hold. This lack of specificity
requires careful handling of exceptions:</p>

<figure class='code'><figcaption><span>Exceptional Conditions</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="k">my</span> <span class="nv">$err</span> <span class="o">=</span> <span class="vg">$@</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">ref</span> <span class="nv">$err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">eval</span> <span class="p">{</span> <span class="nv">$err</span><span class="o">-&gt;</span><span class="n">isa</span><span class="p">(</span><span class="s">&#39;Exception::Class&#39;</span><span class="p">)</span> <span class="p">})</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span> <span class="nv">$err</span><span class="o">-&gt;</span><span class="n">isa</span><span class="p">(</span><span class="s">&#39;SomeException&#39;</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1"># …</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$err</span><span class="o">-&gt;</span><span class="n">isa</span><span class="p">(</span><span class="s">&#39;SomeException&#39;</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1"># …</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1"># …</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span><span class="nb">eval</span> <span class="p">{</span> <span class="nv">$err</span><span class="o">-&gt;</span><span class="n">DOES</span><span class="p">(</span><span class="s">&#39;Throwable&#39;</span><span class="p">)</span> <span class="p">})</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1"># …</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nb">ref</span> <span class="nv">$err</span> <span class="ow">eq</span> <span class="s">&#39;ARRAY&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1"># …</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="nv">$err</span> <span class="o">=~</span><span class="sr"> /DBI/</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1"># …</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$err</span> <span class="o">=~</span><span class="sr"> /cannot open &#39;([^&#39;]+)&#39;/</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1"># …</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not every exception handler requires so many conditions, but I have certainly
exercised all these approaches. Usually my exception handlers accrete
condition as users report new, unexpected errors.</p>

<p>That&rsquo;s not all. My code frequently requires parsing information out of a
string error. Here&rsquo;s an example from <a href="https://github.com/pgxn/pgxn-manager/">PGXN::Manager</a>:</p>

<figure class='code'><figcaption><span>Exception Parsing</span><a href='https://github.com/pgxn/pgxn-manager/blob/master/lib/PGXN/Manager/Distribution.pm#L123'>Source</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="n">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">distmeta</span><span class="p">(</span><span class="n">decode_json</span> <span class="nb">scalar</span> <span class="nv">$member</span><span class="o">-&gt;</span><span class="n">contents</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="n">catch</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">my</span> <span class="nv">$f</span> <span class="o">=</span> <span class="nb">quotemeta</span> <span class="n">__FILE__</span><span class="p">;</span>
</span><span class='line'>    <span class="p">(</span><span class="k">my</span> <span class="nv">$err</span> <span class="o">=</span> <span class="nv">$_</span><span class="p">)</span> <span class="o">=~</span> <span class="sr">s/\s+at\s+$f.+//ms</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">error</span><span class="p">([</span>
</span><span class='line'>        <span class="s">&#39;Cannot parse JSON from “[_1]”: [_2]&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nv">$member</span><span class="o">-&gt;</span><span class="n">fileName</span><span class="p">,</span>
</span><span class='line'>        <span class="nv">$err</span>
</span><span class='line'>    <span class="p">]);</span>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="ow">or</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nv">$self</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>When <a href="https://metacpan.org/module/JSON">JSON</a> throws an exception on invalid JSON, the code must catch that
exception to show the user. The user cares not at all what file threw the
exception, nor the line number. The code must <em>strip that stuff out</em> before
passing the original message off to a localizing error method.</p>

<p>Gross.</p>

<p>It&rsquo;s time to end this. A forthcoming post will propose a plan for adding
proper exception handling to the core Perl language, including exception
objects and an official <code>try</code>/<code>catch</code> syntax.</p>

<!-- notes -->



<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>In fairness much of the <code>$@</code> pain has been addressed [in Perl 5.14].<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
    </entry>
  
</feed>
